from telegram import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
    PreCheckoutQuery
)
from telegram.ext import ContextTypes
import sqlite3
import db

from dateutil.relativedelta import relativedelta
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username

    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute(
        "INSERT OR IGNORE INTO users (user_id, username, is_paid) VALUES (?, ?, ?)",
        (user_id, username, False),
    )
    conn.commit()
    conn.close()

    with open("hello.mp4", "rb") as video:
        await update.message.reply_video(
            video=video,
            caption="‚òùÔ∏è–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ?\n –í —ç—Ç–æ–º –∫–æ—Ä–æ—Ç–∫–æ–º –≤–∏–¥–µ–æ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è \n",
            reply_markup=get_main_keyboard_user(),
        )


def get_main_keyboard_user():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [KeyboardButton("üé• –í–∏–¥–µ–æ")],
        [KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞")],
        [KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–µ")],
        [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def handle_message_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üé• –í–∏–¥–µ–æ":
        await handle_video(update, context)
    elif text == "üí≥ –û–ø–ª–∞—Ç–∞":
        await handle_payment_info(update, context)
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–µ":
        await handle_info(update, context)
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await handle_contacts(update, context)


async def handle_payment_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    price = db.get_setting("price")
    period = db.get_setting("period")
    
    if db.is_user_paid(user_id):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_end = db.get_user_subscription_end(user_id)
        try:
            end_date = datetime.strptime(subscription_end, "%Y-%m-%d %H:%M:%S")
            formatted_date = end_date.strftime("%d.%m.%Y")
        except (ValueError, TypeError):
            formatted_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"
        
        keyboard = [
            [
                InlineKeyboardButton(
                    f"üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –µ—â–µ –Ω–∞ {period} –º–µ—Å. –∑–∞ {price} —Ä—É–±", 
                    callback_data="init_payment"
                )
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_back")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ *{formatted_date}*\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë –µ—â–µ –Ω–∞ {period} –º–µ—Å—è—Ü–∞",
            parse_mode="Markdown",
            reply_markup=reply_markup,
        )
        return
    
    text = db.get_setting("text_payment")
    keyboard = [
        [
            InlineKeyboardButton(
                f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {price} —Ä—É–±", callback_data="init_payment"
            )
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_back")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            text
            + "\n" +
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: *{price} —Ä—É–±* –∑–∞ {period} –º–µ—Å—è—Ü–∞\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
            parse_mode="Markdown",
            reply_markup=reply_markup,
        )


async def init_payment_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    provide_token = db.get_setting("bank_token") 
    price = int(db.get_setting("price")) * 100  # Telegram —Ç—Ä–µ–±—É–µ—Ç —Ü–µ–Ω—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    period = int(db.get_setting("period"))

    await context.bot.send_invoice(
        chat_id=user_id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫—É—Ä—Å",
        description=f"–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –Ω–∞ {period} –º–µ—Å.",
        payload="payment-subscription",  # –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        provider_token=provide_token,
        currency="RUB",
        prices=[LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=price)],
        start_parameter="subscription-start",
        need_name=False,
        need_email=False,
        need_phone_number=False,
    )

async def handle_precheckout_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query: PreCheckoutQuery = update.pre_checkout_query
    if query.invoice_payload != "payment-subscription":
        await query.answer(ok=False, error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
    else:
        await query.answer(ok=True)
    group_id = int(db.get_setting("chat_id"))
    now = datetime.now()
    
async def handle_successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    now = datetime.now()

    with sqlite3.connect(db.DB_PATH) as conn:
        c = conn.cursor()
        c.execute("SELECT data_end FROM users WHERE user_id = ?", (user_id,))
        row = c.fetchone()
        data_end_str = row[0] if row else None

    try:
        current_end = datetime.strptime(data_end_str, "%Y-%m-%d %H:%M:%S") if data_end_str else None
    except ValueError:
        current_end = None

    if current_end and current_end > now:
        start_from = current_end
    else:
        start_from = now

    period = int(db.get_setting("period"))
    new_end = start_from + relativedelta(months=period)

    with sqlite3.connect(db.DB_PATH) as conn:
        c = conn.cursor()
        c.execute("""
            UPDATE users SET 
                is_paid = 1,
                payment_date = ?,
                data_end = ?
            WHERE user_id = ?
        """, (now.strftime("%Y-%m-%d %H:%M:%S"), new_end.strftime("%Y-%m-%d %H:%M:%S"), user_id))
        conn.commit()

    await update.message.reply_text(
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
        f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ *{new_end.strftime('%d.%m.%Y')}*.\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É 'üé•–í–∏–¥–µ–æ'.",
        parse_mode="Markdown",
        reply_markup=get_main_keyboard_user(),
    )

async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard_user()
    )

async def handle_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contacts = db.get_setting("support_concat") or "–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    temp ="–°–≤—è–∑—å –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º: "
    await update.message.reply_text(temp + contacts, reply_markup=get_main_keyboard_user())


async def handle_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    info = db.get_setting("description_coach") or "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    await update.message.reply_text(info, reply_markup=get_main_keyboard_user())


async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    channel = db.get_setting("link_chanal")
    if db.is_user_paid(user_id):
        await update.message.reply_text(
            f"üé• C—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª c –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª–æ–º: {channel}",
            reply_markup=get_main_keyboard_user(),
        )
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üí≥ –û–ø–ª–∞—Ç–∞'",
            reply_markup=get_main_keyboard_user(),
        )


#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
async def handle_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.chat_join_request.from_user
    user_id = user.id
    username = user.username

    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("SELECT is_paid FROM users WHERE user_id = ?", (user_id,))
    row = c.fetchone()
    conn.close()

    if row and row[0]:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª
        try:
            await context.bot.approve_chat_join_request(
                chat_id=update.chat_join_request.chat.id, user_id=user_id
            )
            await context.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É!",
            )
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_id}) –ø—Ä–∏–Ω—è—Ç –≤ –≥—Ä—É–ø–ø—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
    else:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.",
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
async def check_and_remove_expired_subscriptions(context):
    group_id = int(db.get_setting("chat_id"))
    now = datetime.now()
    conn = sqlite3.connect(db.DB_PATH)
    c = conn.cursor()
    c.execute("SELECT user_id, data_end FROM users WHERE is_paid = 1")
    rows = c.fetchall()
    for user_id, date_end in rows:
        try:
            end_dt = datetime.strptime(date_end, "%Y-%m-%d %H:%M:%S")
        except Exception:
            continue
        if now > end_dt:
            try:
                await context.bot.ban_chat_member(group_id, user_id)
                await context.bot.unban_chat_member(group_id, user_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            # –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            c.execute(
                "UPDATE users SET is_paid = 0, payment_date = NULL, data_end = NULL WHERE user_id = ?",
                (user_id,),
            )
            conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def send_subscription_reminders(context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞ 10, 7, 4 –∏ 1 –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    now = datetime.now()
    conn = sqlite3.connect(db.DB_PATH)
    c = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    c.execute("SELECT user_id, data_end FROM users WHERE is_paid = 1")
    rows = c.fetchall()
    
    for user_id, date_end in rows:
        try:
            end_dt = datetime.strptime(date_end, "%Y-%m-%d %H:%M:%S")
        except Exception:
            continue
            
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        days_left = (end_dt - now).days
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 10, 7, 4 –∏ 1 –¥–µ–Ω—å
        if days_left in [10, 7, 4, 1] and days_left > 0:
            try:
                formatted_date = end_dt.strftime("%d.%m.%Y")
                price = db.get_setting("price")
                period = db.get_setting("period")
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–¥–ª–µ–Ω–∏—è
                keyboard = [
                    [
                        InlineKeyboardButton(
                            f"üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ {period} –º–µ—Å. –∑–∞ {price} —Ä—É–±", 
                            callback_data="init_payment"
                        )
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if days_left == 1:
                    message = (
                        f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞ ({formatted_date})!\n\n"
                        f"–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º."
                    )
                else:
                    message = (
                        f"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:* –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π ({formatted_date})\n\n"
                        f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ."
                    )
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode="Markdown",
                    reply_markup=reply_markup
                )
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞ {days_left} –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    conn.close()
