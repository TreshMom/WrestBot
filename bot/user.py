from telegram import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import ContextTypes
import sqlite3
import db

from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username

    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute(
        "INSERT OR IGNORE INTO users (user_id, username, is_paid) VALUES (?, ?, ?)",
        (user_id, username, False),
    )
    conn.commit()
    conn.close()

    with open("hello.mp4", "rb") as video:
        await update.message.reply_video(
            video=video,
            caption="‚òùÔ∏è–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ? –í —ç—Ç–æ–º –∫–æ—Ä–æ—Ç–∫–æ–º –≤–∏–¥–µ–æ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è \n",
            reply_markup=get_main_keyboard_user(),
        )


def get_main_keyboard_user():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞")],
        [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
        [KeyboardButton("üé• –í–∏–¥–µ–æ")],
        [KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–µ")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


async def handle_message_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üí≥ –û–ø–ª–∞—Ç–∞":
        await handle_payment_info(update, context)
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await handle_contacts(update, context)
    elif text == "üé• –í–∏–¥–µ–æ":
        await handle_video(update, context)
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–µ":
        await handle_info(update, context)


async def handle_payment_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if db.is_user_paid(user_id):
        await update.message.reply_text(
            "–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–∏–æ–¥.",
            reply_markup=get_main_keyboard_user(),
        )
        return
    price = db.get_setting("price")
    period = db.get_setting("period")
    keyboard = [
        [
            InlineKeyboardButton(
                f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {price} —Ä—É–±", callback_data="init_payment"
            )
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_back")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            "ü•ã *–ö—É—Ä—Å –≤–æ–ª—å–Ω–æ–π –±–æ—Ä—å–±—ã*\n\n"
            "üî• –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –≤–∏–¥–µ–æ, —Ç–µ—Ö–Ω–∏–∫–∞–º –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: *{price} —Ä—É–±* –∑–∞ {period} –º–µ—Å—è—Ü–∞\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
            parse_mode="Markdown",
            reply_markup=reply_markup,
        )


async def init_payment_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    pass


async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard_user()
    )


async def handle_payment_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    """–ù—É–∂–Ω–æ –≤ users –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞—Ç—É –¥–æ –∫–∞–∫–æ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å–≤–∏—Ç–µ–ª—å–Ω–∞ """
    pass


async def handle_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contacts = db.get_setting("support_concat") or "–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã"
    await update.message.reply_text(contacts, reply_markup=get_main_keyboard_user())


async def handle_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    info = db.get_setting("description_coach") or "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    await update.message.reply_text(info, reply_markup=get_main_keyboard_user())


async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    channel = db.get_setting("link_chanal")
    if db.is_user_paid(user_id):
        await update.message.reply_text(
            f"üé• –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª: {channel}",
            reply_markup=get_main_keyboard_user(),
        )
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üí≥ –û–ø–ª–∞—Ç–∞'",
            reply_markup=get_main_keyboard_user(),
        )


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
async def handle_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.chat_join_request.from_user
    user_id = user.id
    username = user.username

    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("SELECT is_paid FROM users WHERE user_id = ?", (user_id,))
    row = c.fetchone()
    conn.close()

    if row and row[0]:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª
        try:
            await context.bot.approve_chat_join_request(
                chat_id=update.chat_join_request.chat.id, user_id=user_id
            )
            await context.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É!",
            )
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_id}) –ø—Ä–∏–Ω—è—Ç –≤ –≥—Ä—É–ø–ø—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
    else:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.",
        )


async def check_and_remove_expired_subscriptions(context):
    group_id = int(db.get_setting("chat_id"))
    now = datetime.now()
    conn = sqlite3.connect(db.DB_PATH)
    c = conn.cursor()
    c.execute("SELECT user_id, data_end FROM users WHERE is_paid = 1")
    rows = c.fetchall()
    for user_id, date_end in rows:
        try:
            end_dt = datetime.strptime(date_end, "%Y-%m-%d %H:%M:%S")
        except Exception:
            continue
        if now > end_dt:
            try:
                await context.bot.ban_chat_member(group_id, user_id)
                await context.bot.unban_chat_member(group_id, user_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            # –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
            c.execute(
                "UPDATE users SET is_paid = 0, payment_date = NULL, data_end = NULL WHERE user_id = ?",
                (user_id,),
            )
            conn.commit()
    conn.close()
