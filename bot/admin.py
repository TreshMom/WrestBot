import sqlite3
from telegram import ReplyKeyboardMarkup, KeyboardButton, Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes
import os 
import db
import user
from telegram.ext import ConversationHandler

BACK_BUTTON = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"

def get_back_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton(BACK_BUTTON)]], resize_keyboard=True, one_time_keyboard=True)


def get_main_keyboard_admin():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        #[KeyboardButton("üé• –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")],
        [KeyboardButton("üí≥ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É")],
        [KeyboardButton("üìû –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏")],
        [KeyboardButton("üé• –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã")],
        [KeyboardButton("‚ÑπÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–µ—Ä–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_ids = (db.get_setting('admin_usernames') or '').split(',')
    admin_ids = [int(x.strip()) for x in admin_ids if x.strip().isdigit()]
    user_id = update.effective_user.id
    if user_id not in admin_ids:
        await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        return
    await update.message.reply_text(
        "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        reply_markup=get_main_keyboard_admin()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
        admin_ids = (db.get_setting('admin_usernames') or '').split(',')
        admin_ids = [int(x.strip()) for x in admin_ids if x.strip().isdigit()]

        user_id = update.effective_user.id
        if user_id in admin_ids:
            await handle_message_admin(update, context)
        else:
            await handle_message_user(update, context)

async def handle_message_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üí≥ –û–ø–ª–∞—Ç–∞":
        await user.handle_payment_info(update, context)
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await user.handle_contacts(update, context)
    elif text == "üé• –í–∏–¥–µ–æ":
        await user.handle_video(update, context)
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–µ":
        await user.handle_info(update, context)

async def handle_message_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üí≥ –û–ø–ª–∞—Ç–∞":
        await user.handle_payment_info(update, context)
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await user.handle_contacts(update, context)
    elif text == "üé• –í–∏–¥–µ–æ":
        await user.handle_video(update, context)
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–µ":
        await user.handle_info(update, context)
    elif text == "üé• –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ":
        await handle_add_video(update, context)
    elif text == "üí≥ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É":
        await handle_change_price(update, context)
    elif text == "üìû –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏":
        await handle_change_period(update, context)
    elif text == "‚ÑπÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–µ—Ä–µ":
        await handle_change_info(update, context) 
    elif text == "üé• –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã":
        await handle_change_contacts(update, context)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await handle_back_to_admin_menu(update, context)



ADD_VIDEO_TOPIC, ADD_VIDEO_TITLE, ADD_VIDEO_FILE, ADD_VIDEO_DESCRIPTION = range(4)
CHANGE_PRICE, CHANGE_PERIOD, CHANGE_CONTACTS, CHANGE_INFO = range(3, 7)

def get_topics_keyboard():
    topics = db.get_topics_from_settings()
    keyboard = [[KeyboardButton(topic)] for topic in topics]
    keyboard.append([KeyboardButton(BACK_BUTTON)])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

async def handle_add_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫ –¥–ª—è –≤–∏–¥–µ–æ:", reply_markup=get_topics_keyboard())
    return ADD_VIDEO_TOPIC

async def add_video_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == BACK_BUTTON:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_main_keyboard_admin())
        return ConversationHandler.END
    context.user_data['video_topic'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:", reply_markup=get_back_keyboard())
    return ADD_VIDEO_TITLE

async def add_video_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == BACK_BUTTON:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫ –¥–ª—è –≤–∏–¥–µ–æ:", reply_markup=get_topics_keyboard())
        return ADD_VIDEO_TOPIC
    context.user_data['video_title'] = update.message.text
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª:", reply_markup=get_back_keyboard())
    return ADD_VIDEO_FILE

async def add_video_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == BACK_BUTTON:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ:", reply_markup=get_back_keyboard())
        return ADD_VIDEO_TITLE
    file = update.message.video or update.message.document
    if not file:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.", reply_markup=get_back_keyboard())
        return ADD_VIDEO_FILE
    os.makedirs("videos", exist_ok=True)
    file_path = f"videos/{file.file_id}.mp4"
    tg_file = await file.get_file()
    await tg_file.download_to_drive(file_path)
    context.user_data['video_path'] = file_path
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ:", reply_markup=get_back_keyboard())
    return ADD_VIDEO_DESCRIPTION


async def track_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.forum_topic_created:
        topic = update.message.forum_topic_created
        await update.message.reply_text(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫: {topic.name}")


async def add_video_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == BACK_BUTTON:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª:", reply_markup=get_back_keyboard())
        return ADD_VIDEO_FILE
    context.user_data['video_description'] = update.message.text
    # –ü–æ–ª—É—á–∏—Ç—å chat_id –≥—Ä—É–ø–ø—ã –∏ id —Ç–æ–ø–∏–∫–∞ (message_thread_id) –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–ø–∏–∫–∞
    group_id = int(db.get_setting('chat_id'))  # group_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ settings
    topic_name = context.user_data['video_topic']
    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–ø–∏–∫–æ–≤ —á–µ—Ä–µ–∑ Bot API
    forum_topics = await update.get_bot().get_forum_topic_list(chat_id=group_id)
    topic_id = None
    for topic in forum_topics.topics:
        if topic.name == topic_name:
            topic_id = topic.message_thread_id
            break
    if not topic_id:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–ø–∏–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ –≥—Ä—É–ø–ø–µ.")
        return ConversationHandler.END
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –≤ –Ω—É–∂–Ω—ã–π —Ç–æ–ø–∏–∫
    with open(context.user_data['video_path'], 'rb') as video_file:
        await update.get_bot().send_video(
            chat_id=group_id,
            message_thread_id=topic_id,
            video=video_file,
            caption=f"{context.user_data['video_title']}\n\n{context.user_data['video_description']}"
        )
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
    db.add_video(
        context.user_data['video_topic'],
        context.user_data['video_title'],
        context.user_data['video_path'],
        context.user_data['video_description']
    )
    await update.message.reply_text("–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=get_main_keyboard_admin())
    context.user_data.clear()
    return ConversationHandler.END

async def handle_change_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ —Ä—É–±–ª—è—Ö):",
        reply_markup=get_back_keyboard()
    )
    return CHANGE_PRICE

async def save_new_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == BACK_BUTTON:
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_main_keyboard_admin()
        )
        return ConversationHandler.END

    if not text.isdigit():
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_back_keyboard()
        )
        return CHANGE_PRICE
    
    new_price = int(text)
    conn = sqlite3.connect(db.DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE settings SET price = ?", (new_price,))
    conn.commit()
    conn.close()

    await update.message.reply_text(
        "–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
        reply_markup=get_main_keyboard_admin()
    )
    return ConversationHandler.END

async def handle_change_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ –º–µ—Å—è—Ü–∞—Ö):",
        reply_markup=get_back_keyboard()
    )
    return CHANGE_PERIOD

async def save_new_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == BACK_BUTTON:
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_main_keyboard_admin()
        )
        return ConversationHandler.END

    if not text.isdigit():
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
            reply_markup=get_back_keyboard()
        )
        return CHANGE_PERIOD
    
    new_period = int(text)
    conn = sqlite3.connect(db.DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE settings SET period = ?", (new_period,))
    conn.commit()
    conn.close()

    await update.message.reply_text(
        "–ü–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.",
        reply_markup=get_main_keyboard_admin()
    )
    return ConversationHandler.END

async def handle_change_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞:",
        reply_markup=get_back_keyboard()
    )
    return CHANGE_INFO

async def save_new_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == BACK_BUTTON:
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_main_keyboard_admin()
        )
        return ConversationHandler.END

    new_info = text
    conn = sqlite3.connect(db.DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE settings SET description = ?", (new_info,))
    conn.commit()
    conn.close()

    await update.message.reply_text(
        "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
        reply_markup=get_main_keyboard_admin()
    )
    return ConversationHandler.END

async def handle_change_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
        reply_markup=get_back_keyboard()
    )
    return CHANGE_CONTACTS

async def save_new_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == BACK_BUTTON:
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_main_keyboard_admin()
        )
        return ConversationHandler.END

    new_contacts = text
    conn = sqlite3.connect(db.DB_PATH)
    c = conn.cursor()
    c.execute("UPDATE settings SET contacts = ?", (new_contacts,))
    conn.commit()
    conn.close()

    await update.message.reply_text(
        "–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.",
        reply_markup=get_main_keyboard_admin()
    )
    return ConversationHandler.END


async def handle_back_to_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_main_keyboard_admin()
    )
    return ConversationHandler.END