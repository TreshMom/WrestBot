import os
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler, ChatJoinRequestHandler
)
import sqlite3
from datetime import datetime, timedelta
import time
from tinkoff.invest import Client
from tinkoff.invest.utils import now

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TOKEN')
ADMIN_USERNAME = os.getenv('ADMIN_USERNAME')
PRIVATE_CHANNEL = os.getenv('PRIVATE_CHANNEL')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ API
TINKOFF_TOKEN = os.getenv('TINKOFF_TOKEN')  # –ü–æ–ª—É—á–∏—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
TINKOFF_ACCOUNT = os.getenv('TINKOFF_ACCOUNT')  # –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞
SUBSCRIPTION_PRICE = int(os.getenv('SUBSCRIPTION_PRICE', '2000'))  # –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö


def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞")],
        [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
        [KeyboardButton("üé• –í–∏–¥–µ–æ")],
        [KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, 
                  username TEXT,
                  is_paid BOOLEAN,
                  payment_date TEXT,
                  payment_id TEXT)''')
    conn.commit()
    conn.close()


def is_user_paid(user_id):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT is_paid FROM users WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else False


def generate_payment_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞"""
    return f"PAY_{int(time.time())}_{os.urandom(4).hex()}"


def check_payment(payment_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API –¢–∏–Ω—å–∫–æ—Ñ—Ñ"""
    try:
        with Client(TINKOFF_TOKEN) as client:
            operations = client.operations.get_operations(
                account_id=TINKOFF_ACCOUNT,
                from_=now() - timedelta(days=1),
                to=now()
            )

            for operation in operations.operations:
                if operation.description == payment_id and operation.payment >= SUBSCRIPTION_PRICE:
                    return True
            
            return False
    except Exception as e:
        logger.error(f"Error checking payment: {e}")
        return False


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, username, is_paid) VALUES (?, ?, ?)",
              (user_id, username, False))
    conn.commit()
    conn.close()

    with open('hello.mp4', 'rb') as video:
        await update.message.reply_video(
            video=video,
            caption="‚òùÔ∏è–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ? –í —ç—Ç–æ–º –∫–æ—Ä–æ—Ç–∫–æ–º –≤–∏–¥–µ–æ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è \n –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 2000 —Ä—É–±–ª–µ–π –∑–∞ 3 –º–µ—Å—è—Ü–∞",
            reply_markup=get_main_keyboard()
        )


async def handle_payment_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 2000 —Ä—É–±", callback_data="init_payment")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="go_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(
            "ü•ã *–ö—É—Ä—Å –±–æ—Ä—å–±—ã*\n\n"
            "üî• –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –≤–∏–¥–µ–æ, —Ç–µ—Ö–Ω–∏–∫–∞–º –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: *2000 —Ä—É–±* –∑–∞ 3 –º–µ—Å—è—Ü–∞\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )


async def init_payment_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–ø–ª–∞—Ç–∞
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT is_paid FROM users WHERE user_id = ?", (user_id,))
    row = c.fetchone()

    if row and row[0]:  # –µ—Å–ª–∏ is_paid = 1
        await update.callback_query.answer()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä —É –∫–Ω–æ–ø–∫–∏
        await update.callback_query.message.reply_text(
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞.",
            reply_markup=get_main_keyboard()
        )
        conn.close()
        return

    # –ï—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã
    payment_id = generate_payment_id()
    c.execute("UPDATE users SET payment_id = ? WHERE user_id = ?", (payment_id, user_id))
    conn.commit()
    conn.close()

    payment_message = f"""
üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏

–°—É–º–º–∞: {SUBSCRIPTION_PRICE} —Ä—É–±.
–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: {TINKOFF_ACCOUNT}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: {payment_id}

‚ö†Ô∏è –í–∞–∂–Ω–æ: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É!
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"
    """

    keyboard = [[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{payment_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.answer()
    await update.callback_query.message.reply_text(
        payment_message,
        reply_markup=reply_markup
    )


async def handle_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())


async def handle_payment_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    payment_id = query.data.split("_", 1)[1]
    user_id = update.effective_user.id
    
    if check_payment(payment_id):
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("UPDATE users SET is_paid = ?, payment_date = ? WHERE user_id = ?",
                  (True, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id))
        conn.commit()
        conn.close()

        await query.message.reply_text(
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É.",
            reply_markup=get_main_keyboard()
        )
    else:
        await query.message.reply_text(
            "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            "1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–ª–∞—Ç–µ–∂—É\n"
            "2. –ü—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            reply_markup=get_main_keyboard()
        )


async def handle_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {ADMIN_USERNAME}",
        reply_markup=get_main_keyboard()
    )


async def handle_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ú–∞–∫—Å–∏–º –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á, —á–µ—Ç—ã—Ä–µ—Ö –∫—Ä–∞—Ç–Ω—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∫—É–±–∫–∞ –≥–∞–ª–∞–∫—Ç–∏–∫–∏, —Ç—Ä–µ—Ö–∫—Ä–∞—Ç–Ω—ã–π –ø—Ä–∏–∑–µ—Ä –¥–≤–æ—Ä–æ–≤—ã—Ö –∏–≥—Ä –±–µ–∑ –ø—Ä–∞–≤–∏–ª",
        reply_markup=get_main_keyboard()
    )


async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if is_user_paid(user_id):
        await update.message.reply_text(
            f"üé• –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª: {PRIVATE_CHANNEL}",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üí≥ –û–ø–ª–∞—Ç–∞'",
            reply_markup=get_main_keyboard()
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üí≥ –û–ø–ª–∞—Ç–∞":
        await handle_payment_info(update, context)
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await handle_contacts(update, context)
    elif text == "üé• –í–∏–¥–µ–æ":
        await handle_video(update, context)
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–µ—Ä–µ":
        await handle_info(update, context)


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
async def handle_join_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.chat_join_request.from_user
    user_id = user.id
    username = user.username

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT is_paid FROM users WHERE user_id = ?", (user_id,))
    row = c.fetchone()
    conn.close()

    if row and row[0]:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª
        try:
            await context.bot.approve_chat_join_request(
                chat_id=update.chat_join_request.chat.id,
                user_id=user_id
            )
            await context.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É!"
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_id}) –ø—Ä–∏–Ω—è—Ç –≤ –≥—Ä—É–ø–ø—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
    else:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø."
        )


def main():
    init_db()
    
    application = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_payment_check, pattern="^check_"))
    application.add_handler(CallbackQueryHandler(init_payment_process, pattern="^init_payment$"))
    application.add_handler(CallbackQueryHandler(handle_back, pattern="^go_back$"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    application.add_handler(ChatJoinRequestHandler(handle_join_request))

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()
