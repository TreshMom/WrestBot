import os
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import sqlite3
from datetime import datetime, timedelta
import requests
import json
import time
from tinkoff.invest import Client
from tinkoff.invest.utils import now

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('TOKEN')
ADMIN_USERNAME = os.getenv('ADMIN_USERNAME')
PRIVATE_CHANNEL = os.getenv('PRIVATE_CHANNEL')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ API
TINKOFF_TOKEN = os.getenv('TINKOFF_TOKEN')  # –ü–æ–ª—É—á–∏—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
TINKOFF_ACCOUNT = os.getenv('TINKOFF_ACCOUNT')  # –ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞
SUBSCRIPTION_PRICE = os.getenv('SUBSCRIPTION_PRICE') # –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞")],
        [KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
        [KeyboardButton("üé• –í–∏–¥–µ–æ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, 
                  username TEXT,
                  is_paid BOOLEAN,
                  payment_date TEXT,
                  payment_id TEXT)''')
    conn.commit()
    conn.close()

def is_user_paid(user_id):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT is_paid FROM users WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else False

def generate_payment_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞"""
    return f"PAY_{int(time.time())}_{os.urandom(4).hex()}"

def check_payment(payment_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API –¢–∏–Ω—å–∫–æ—Ñ—Ñ"""
    try:
        with Client(TINKOFF_TOKEN) as client:
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å—á–µ—Ç—É
            operations = client.operations.get_operations(
                account_id=TINKOFF_ACCOUNT,
                from_=now() - timedelta(days=1),
                to=now()
            )

            # –ò—â–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –Ω—É–∂–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
            for operation in operations.operations:
                if operation.description == payment_id and operation.payment >= SUBSCRIPTION_PRICE:
                    return True
            
            return False
    except Exception as e:
        logger.error(f"Error checking payment: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("INSERT OR IGNORE INTO users (user_id, username, is_paid) VALUES (?, ?, ?)",
              (user_id, username, False))
    conn.commit()
    conn.close()

    with open('hello.mp4', 'rb') as video:
        await update.message.reply_video(
            video=video,
            caption="‚òùÔ∏è–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ–º –Ω–∞ –∫–∞–Ω–∞–ª–µ? –í —ç—Ç–æ–º –∫–æ—Ä–æ—Ç–∫–æ–º –≤–∏–¥–µ–æ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            reply_markup=get_main_keyboard()
        )

async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    user_id = update.effective_user.id
    payment_id = generate_payment_id()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º payment_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("UPDATE users SET payment_id = ? WHERE user_id = ?", (payment_id, user_id))
    conn.commit()
    conn.close()

    payment_message = f"""
üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏

–°—É–º–º–∞: {SUBSCRIPTION_PRICE} —Ä—É–±.
–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: {TINKOFF_ACCOUNT}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É: {payment_id}

‚ö†Ô∏è –í–∞–∂–Ω–æ: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É!
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"
    """
    
    keyboard = [[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_{payment_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        payment_message,
        reply_markup=reply_markup
    )

async def handle_payment_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    payment_id = query.data.split("_")[1]
    user_id = update.effective_user.id
    
    if check_payment(payment_id):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        conn = sqlite3.connect('users.db')
        c = conn.cursor()
        c.execute("UPDATE users SET is_paid = ?, payment_date = ? WHERE user_id = ?",
                  (True, datetime.now().strftime("%Y-%m-%d %H:%M:%S"), user_id))
        conn.commit()
        conn.close()

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        try:
            invite_link = await context.bot.create_chat_invite_link(
                chat_id=PRIVATE_CHANNEL,
                member_limit=1,
                expire_date=int((datetime.now() + timedelta(days=1)).timestamp())
            )
            await query.message.reply_text(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                f"üé• –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª:\n"
                f"{invite_link.invite_link}\n\n"
                f"‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞",
                reply_markup=get_main_keyboard()
            )
        except Exception as e:
            logger.error(f"Error creating invite link: {e}")
            await query.message.reply_text(
                "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É.",
                reply_markup=get_main_keyboard()
            )
    else:
        await query.message.reply_text(
            "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
            "1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–ª–∞—Ç–µ–∂—É\n"
            "2. –ü—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            reply_markup=get_main_keyboard()
        )

async def handle_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {ADMIN_USERNAME}",
        reply_markup=get_main_keyboard()
    )

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if is_user_paid(user_id):
        await update.message.reply_text(
            f"üé• –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª: {PRIVATE_CHANNEL}",
            reply_markup=get_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∏–¥–µ–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üí≥ –û–ø–ª–∞—Ç–∞'",
            reply_markup=get_main_keyboard()
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üí≥ –û–ø–ª–∞—Ç–∞":
        await handle_payment(update, context)
    elif text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await handle_contacts(update, context)
    elif text == "üé• –í–∏–¥–µ–æ":
        await handle_video(update, context)

def main():
    init_db()
    
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_payment_check, pattern="^check_"))

    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 